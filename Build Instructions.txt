Sorry but I'm french, if someone want to translate...

Objectif : 
Le but est de construire une distrib gdal 1.9.2 64 bits pour Windows supportant à minima ECW et OGDI avec les bindings Python et Java.

-------------------------------------------------------
Prérequis :
Toute la compilation va s'appuyer sur le compilateur Visual C++ 2010.
Nous commencerons donc par installer Microsoft Visual C++ 2010 Express. 
Un lien pour télécharger l'ISO : https://go.microsoft.com/?linkid=9709969
Dézipper l'ISO avec 7zip (par exemple) et lancer le setup puis installer Microsoft Visual C++ 2010 Express.

Par défaut, il n'est pas possible de faire du 64 bits avec Visual C++ 2010 Express. 
Il faut installer le "Framework .NET 4.0" et le "Windows Software Development Kit version 7.1" puis passer en SP1 "Microsoft Visual Studio 2010 SP1" et enfin un outil qui va nous lier tout çà "Mise à jour du compilateur Microsoft Visual C++ 2010 Service Pack 1".
Un lien framework .NET 4.0 : https://www.microsoft.com/fr-fr/download/details.aspx?id=17851
Un lien Windows Software Development Kit version 7.1 : http://msdn.microsoft.com/en-us/windowsserver/bb980924.aspx
Un lien Microsoft Visual Studio 2010 SP1 : https://www.microsoft.com/fr-fr/download/details.aspx?id=23691
Mise à jour du compilateur Microsoft Visual C++ 2010 Service Pack 1 : http://www.microsoft.com/fr-fr/download/details.aspx?id=4422

Dans l'installation SDK installer seulement "Windows Headers and Libraries" et "Tools". Décocher tout le reste.

On y est presque. Si on veut que tout soit beau il faut ajouter un fichier vcvars64.bat dans le répertoire <InstallVS2010>\VC\bin\amd64
Ajouter à ce fichier le contenu suivant : 
CALL "<InstallSDK>\Windows\v7.1\Bin\SetEnv.cmd" /release /x64

Tester en lançant l'invite de commande visual studio ("Visual Studio Command Prompt") et taper "vcvarsall.bat amd64". Cela doit vous afficher :
Setting SDK environment relative to D:\Program Files\Microsoft SDKs\Windows\v7.1
\.
Targeting Windows 7 x64 Release

C'est à partir de la que vont s'effectuer tout les builds avec nmake.

-----------------------------------------------------
Premier build gdal 1.9.2 64 bits
Modifier le fichier gdal-1.9.2\nmake.opt pour régler le GDAL_HOME vers un répertoire qui servira à tout pousser après le build.
Lancer l'invite de commande visual studio et taper "vcvarsall.bat amd64".
Positionner vous dans le répertoire "gdal-1.9.2" et taper :
nmake /f makefile.vc
BUILD SUCCESS !!
et ensuite : nmake /f makefile.vc install

Positionner vous dans le répertoire GDAL_HOME/bin (défini dans le nmake.opt) et lancer "gdalinfo --formats". Voici la sortie :

Supported Formats:
  VRT (rw+v): Virtual Raster
  GTiff (rw+v): GeoTIFF
  NITF (rw+v): National Imagery Transmission Format
  RPFTOC (rov): Raster Product Format TOC format
  ECRGTOC (rov): ECRG TOC format
  HFA (rw+v): Erdas Imagine Images (.img)
  SAR_CEOS (rov): CEOS SAR Image
  CEOS (rov): CEOS Image
  JAXAPALSAR (rov): JAXA PALSAR Product Reader (Level 1.1/1.5)
  GFF (rov): Ground-based SAR Applications Testbed File Format (.gff)
  ELAS (rw+v): ELAS
  AIG (rov): Arc/Info Binary Grid
  AAIGrid (rwv): Arc/Info ASCII Grid
  GRASSASCIIGrid (rov): GRASS ASCII Grid
  SDTS (rov): SDTS Raster
  DTED (rwv): DTED Elevation Raster
  PNG (rwv): Portable Network Graphics
  JPEG (rwv): JPEG JFIF
  MEM (rw+): In Memory Raster
  JDEM (rov): Japanese DEM (.mem)
  GIF (rwv): Graphics Interchange Format (.gif)
  BIGGIF (rov): Graphics Interchange Format (.gif)
  ESAT (ro): Envisat Image Format
  BSB (rov): Maptech BSB Nautical Charts
  XPM (rwv): X11 PixMap Format
  BMP (rw+v): MS Windows Device Independent Bitmap
  DIMAP (rov): SPOT DIMAP
  AirSAR (ro): AirSAR Polarimetric Image
  RS2 (ro): RadarSat 2 XML Product
  PCIDSK (rw+v): PCIDSK Database File
  PCRaster (rw): PCRaster Raster File
  ILWIS (rw+v): ILWIS Raster Map
  SGI (rw+): SGI Image File Format 1.0
  SRTMHGT (rwv): SRTMHGT File Format
  Leveller (rw+): Leveller heightfield
  Terragen (rw+): Terragen heightfield
  ISIS3 (rov): USGS Astrogeology ISIS cube (Version 3)
  ISIS2 (rw+v): USGS Astrogeology ISIS cube (Version 2)
  PDS (rov): NASA Planetary Data System
  TIL (rov): EarthWatch .TIL
  ERS (rw+v): ERMapper .ers Labelled
  L1B (rov): NOAA Polar Orbiter Level 1b Data Set
  FIT (rwv): FIT Image
  GRIB (rov): GRIdded Binary (.grb)
  RMF (rw+v): Raster Matrix Format
  MSGN (ro): EUMETSAT Archive native (.nat)
  RST (rw+v): Idrisi Raster A.1
  INGR (rw+v): Intergraph Raster
  GSAG (rwv): Golden Software ASCII Grid (.grd)
  GSBG (rw+v): Golden Software Binary Grid (.grd)
  GS7BG (rov): Golden Software 7 Binary Grid (.grd)
  COSAR (ro): COSAR Annotated Binary Matrix (TerraSAR-X)
  TSX (rov): TerraSAR-X Product
  COASP (ro): DRDC COASP SAR Processor Raster
  R (rwv): R Object Data Store
  PNM (rw+v): Portable Pixmap Format (netpbm)
  DOQ1 (rov): USGS DOQ (Old Style)
  DOQ2 (rov): USGS DOQ (New Style)
  ENVI (rw+v): ENVI .hdr Labelled
  EHdr (rw+v): ESRI .hdr Labelled
  GenBin (rov): Generic Binary (.hdr Labelled)
  PAux (rw+): PCI .aux Labelled
  MFF (rw+): Vexcel MFF Raster
  MFF2 (rw+): Vexcel MFF2 (HKV) Raster
  FujiBAS (ro): Fuji BAS Scanner Image
  GSC (rov): GSC Geogrid
  FAST (rov): EOSAT FAST Format
  BT (rw+v): VTP .bt (Binary Terrain) 1.3 Format
  LAN (rw+v): Erdas .LAN/.GIS
  CPG (ro): Convair PolGASP
  IDA (rw+): Image Data and Analysis
  NDF (rov): NLAPS Data Format
  EIR (rov): Erdas Imagine Raw
  DIPEx (rov): DIPEx
  LCP (rov): FARSITE v.4 Landscape File (.lcp)
  GTX (rw+v): NOAA Vertical Datum .GTX
  LOSLAS (rov): NADCON .los/.las Datum Grid Shift
  NTv2 (rw+v): NTv2 Datum Grid Shift
  ACE2 (rov): ACE2
  SNODAS (rov): Snow Data Assimilation System
  RIK (ro): Swedish Grid RIK (.rik)
  USGSDEM (rwv): USGS Optional ASCII DEM (and CDED)
  GXF (ro): GeoSoft Grid Exchange Format
  NWT_GRD (rov): Northwood Numeric Grid Format .grd/.tab
  NWT_GRC (rov): Northwood Classified Grid Format .grc/.tab
  ADRG (rw+v): ARC Digitized Raster Graphics
  SRP (rov): Standard Raster Product (ASRP/USRP)
  BLX (rw): Magellan topo (.blx)
  SAGA (rw+v): SAGA GIS Binary Grid (.sdat)
  KMLSUPEROVERLAY (rwv): Kml Super Overlay
  XYZ (rwv): ASCII Gridded XYZ
  HF2 (rwv): HF2/HFZ heightfield raster
  OZI (rov): OziExplorer Image File
  CTG (rov): USGS LULC Composite Theme Grid
  E00GRID (rov): Arc/Info Export E00 GRID
  ZMap (rwv): ZMap Plus Grid
  NGSGEOID (rov): NOAA NGS Geoid Height Grids

----------------------------------------------------------------
Build proj4 4.8.0
Modifier le fichier proj.4-4.8.0\nmake.opt et modifier
!IFNDEF INSTDIR
 INSTDIR=<Lieu où déployer proj4>
!ENDIF
Modifier le fichier proj.4-4.8.0\src\makefile.vc
GDAL_HOME = "<Meme répertoire que le GDAL_HOME paramétré plus haut>"

Lancer l'invite de commande visual studio et taper "vcvarsall.bat amd64".
Positionner vous dans le répertoire "proj.4-4.8.0" et taper :
nmake /f makefile.vc
BUILD SUCCESS !!
et ensuite : 
cd src 
nmake /f makefile.vc install
nmake /f makefile.vc deploy

Paramétrer GDAL pour utiliser Proj4
Modifier le fichier gdal-1.9.2\nmake.opt
Remplacer la partie PROJ_FLAGS, etc. par
PROJ_HOME = <Lieu où est déployé proj4 (INSTDIR)>
!IFDEF PROJ_HOME
PROJ_FLAGS = -DPROJ_STATIC
PROJ_INCLUDE = -I$(PROJ_HOME)\include
PROJ_LIBRARY = $(PROJ_HOME)\lib\proj_i.lib
!ENDIF

-----------------------------------------------------------------
Build geos 3.2.3
  
Lancer le fichier autogen.bat

Modifier le fichier geos-3.2.3\nmake.opt et modifier
!ELSEIF "$(_NMAKE_VER)" == "10.00.30319.01"
GEOS_MSVC = 10.0
GEOS_MSC = 1600
!ELSE
GEOS_MSVC = 0.0
GEOS_MSC = 0
!ENDIF
par
!ELSEIF "$(_NMAKE_VER)" == "10.00.30319.01"
GEOS_MSVC = 10.0
GEOS_MSC = 1600
!ELSE
GEOS_MSVC = 10.0
GEOS_MSC = 1600
!ENDIF
Cela va permettre de forcer la version du compilateur utilisée.
Ajouter aussi 
!IFNDEF GDAL_HOME
GDAL_HOME = "<Meme répertoire que le GDAL_HOME paramétré plus haut>"
!ENDIF

Modifier le geos-3.2.3\makefile.vc pour ajouter de quoi mettre les dll avec gdal.
deploy:
	cd source
	-mkdir $(GDAL_HOME)\bin
	copy *.dll $(GDAL_HOME)\bin
	cd ..

Lancer l'invite de commande visual studio et taper "vcvarsall.bat amd64".
Positionner vous dans le répertoire "geos-3.2.3" et taper :
nmake /f makefile.vc
BUILD SUCCESS !!
et ensuite : nmake /f makefile.vc deploy

Paramétrer GDAL pour utiliser GEOS
Modifier le fichier gdal-1.9.2\nmake.opt
Remplacer
# Uncomment for GEOS support
#GEOS_DIR=C:/warmerda/geos
#GEOS_CFLAGS = -I$(GEOS_DIR)/capi -I$(GEOS_DIR)/source/headers -DHAVE_GEOS
#GEOS_LIB     = $(GEOS_DIR)/source/geos_c_i.lib
par
GEOS_DIR=<Répertoire root de geos-3.2.3>
GEOS_CFLAGS = -I$(GEOS_DIR)\capi -I$(GEOS_DIR)\source\headers -DHAVE_GEOS
GEOS_LIB     = $(GEOS_DIR)\source\geos_c_i.lib

-------------------------------------------------------------------------------
Build OGDI

Il faut d'abord préparer un cygwin pour pouvoir compiler OGDI. Lancer le cygwin-x86_64.exe.
Spécifier un répertoire d'install puis un répertoire pour les downloads nécessaires.
Sélectionner la première URL comme download site : http://cygwin.mirror.constant.com
Dans l'arbre proposé ouvrir la partie Devel puis sélectionner :
autobuild / autoconf / autoconf 2.1 / autogen / automake / automake 1.15 / libtool / make / pkg-config
Appuyer sur Suivant / Suivant 

Copier / Coller le répertoire ogdi-3.2.0 dans <Rep Install Cygwin64>/home
Dans ce répertoire modifier le fichier varwin32.bat
Modifier les variables
MSDevDir
MSVCDir
INSTALLDISK

Modifier le fichier makefile et ajouter à la fin
deploy:
	cp ./bin/win32/*.dll <la valeur de GDAL_HOME>/bin

Lancer l'invite de commande visual studio et taper "vcvarsall.bat amd64"
Se positionner dans le répertoire <Rep Install Cygwin64>/home/ogdi-3.2.0 et taper "varwin32.bat"
Dans le bash taper "make"
BUILD SUCCESS !!
et ensuite : "make install" puis "make deploy"

Incidents possibles : 
Les fins de ligne du fichier ogdi-3.2.0/configs/mkinstalldirs peuvent poser des problèmes. Remplacer les à l'aide de notepad++ Edition > Convertir les sauts de ligne > Convertir en format UNIX
Erreur lors du link. Le path vers les fichiers Visual C++ ne doit pas pointer au bon endroit (racine au lieu du sous répertoire amd64). Vérifier les variables d'environnement de varwin32.bat, modifier et ATTENTION relancer l'invite de commande pour bien nettoyer les variables.

Paramétrer GDAL pour utiliser OGDI
Modifier le fichier gdal-1.9.2\nmake.opt
Remplacer
# Uncomment the following and update to enable OGDI support.
#OGDIDIR =	D:\warmerda\iii\devdir
#OGDIVER =	31
#OGDILIB =	$(OGDIDIR)\lib\$(TARGET)\ogdi$(OGDIVER).lib \
#		$(OGDIDIR)\lib\$(TARGET)\zlib_ogdi$(OGDIVER).lib
par
OGDIDIR =	<Chemin vers ogdi dans cygwin>
OGDIVER =	32
OGDILIB =	$(OGDIDIR)\lib\win32\ogdi.lib \
		$(OGDIDIR)\lib\win32\zlib_ogdi$(OGDIVER).lib
		
Il est nécessaire de modifier le fichier frmts\makefile.vc pour pouvoir linker zlib
Remplacer
!IFDEF OGDIDIR
EXTRAFLAGS	=	$(EXTRAFLAGS) -DFRMT_ogdi
!ELSE
EXTRAFLAGS	=	$(EXTRAFLAGS) -DFRMT_zlib
!ENDIF
par
!IFDEF OGDIDIR
EXTRAFLAGS	=	$(EXTRAFLAGS) -DFRMT_ogdi
!ENDIF
EXTRAFLAGS	=	$(EXTRAFLAGS) -DFRMT_zlib


--------------------------------------------------------------------------------------
CONFIGURE ERDAS ECW 4.3
N'est possible que si on récupère le mot de passe de l'installeur : "contacter le support".
Modifier le fichier gdal-1.9.2\nmake.opt
Remplacer
ECWDIR  = 	"c:/Program Files/ERDAS/ERDAS ECW JPEG2000 Read SDK"
ECWFLAGS =	-DECWSDK_VERSION=41 \
		-I$(ECWDIR)\include \
		-I$(ECWDIR)\include/NCSECW/api -I$(ECWDIR)\include/NCSECW/jp2 \
		-I$(ECWDIR)\include/NCSECW/ecw
ECWLIB  = 	$(ECWDIR)\lib\vc90\win32\NCSEcw4_RO.lib \
		$(ECWDIR)\lib\vc90\win32\NCSUtil4.lib \
		$(ECWDIR)\lib\vc90\win32\NCScnet4.lib
par
ECWDIR  = 	<Location du SDK>
ECWFLAGS =	-DECWSDK_VERSION=43 \
		-I$(ECWDIR)\include \
		-I$(ECWDIR)\include/NCSECW/api -I$(ECWDIR)\include/NCSECW/jp2 \
		-I$(ECWDIR)\include/NCSECW/ecw
ECWLIB  = 	$(ECWDIR)\lib\vc100\x64\NCSEcw4_RO.lib \
		$(ECWDIR)\lib\vc100\x64\NCSUtil4.lib \
		$(ECWDIR)\lib\vc100\x64\NCScnet4.lib

Décommenter ECW_PLUGIN = YES
		
Modifier le fichier gdal-1.9.2\makefile.vc
Ajouter à la fin
deploy-ecw:
	copy $(ECWDIR)\bin\vc10\x64\tbb.dll $(BINDIR)
	copy $(ECWDIR)\bin\vc10\x64\NCSEcw4_RO.dll $(BINDIR)
	copy $(ECWDIR)\bin\vc10\x64\NCSUtil4.dll $(BINDIR)
	copy $(ECWDIR)\bin\vc10\x64\NCScnet4.dll $(BINDIR)
	
Lancer l'invite de commande visual studio et taper "vcvarsall.bat amd64".
Positionner vous dans le répertoire "gdal-1.9.2" et taper :
nmake /f makefile.vc deploy-ecw
------------------------------------------------------------------------------------------
BINDINGS

Installation de swig
Dézipper swigwin-2.0.4 où bon vous semble.
Modifier le fichier gdal-1.9.2\nmake.opt. Paramétrer la variable SWIG.

Paramétrer les variables d'environnement suivante : 
GDAL_DATA=<Chemin vers les datas>
GDAL_DRIVER_PATH=<Chemin vers les gdal-plugins>
PROJ_LIB=<Chemin vers le déploiement de PROJ4>
PATH=Ajouter le chemin vers les exe gdal

Installation de Python 2.7.11 (Ou bon vous semble mais éviter les espaces dans les dossiers)
Modifier le fichier gdal-1.9.2\nmake.opt
Mettre à jour la variable PYDIR





